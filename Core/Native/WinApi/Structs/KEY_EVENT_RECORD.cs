using System.Runtime.InteropServices;

namespace Ax.Engine.Core.Native
{
    public static partial class WinApi
    {
        /// <summary>
        ///  Describes a keyboard input event in a console <see cref="INPUT_RECORD"/> structure.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Unicode)]
        public struct KEY_EVENT_RECORD
        {
            /// <summary>
            ///  If the key is pressed, this member is TRUE. Otherwise, this member is FALSE (the key is released).
            /// </summary>
            [FieldOffset(0), MarshalAs(UnmanagedType.Bool)] public bool bKeyDown;

            /// <summary>
            ///  The repeat count, which indicates that a key is being held down. For example, when a key is held down, you might get five events with this member equal to 1, one event with this member equal to 5, or multiple events with this member greater than or equal to 1.
            /// </summary>
            [FieldOffset(4), MarshalAs(UnmanagedType.U2)] public ushort wRepeatCount;

            /// TODO : VIRTUAL_KEY_CODE

            /// <summary>
            ///  The virtual scan code of the given key that represents the device-dependent value generated by the keyboard hardware. See <see cref="VIRTUAL_KEY_CODE"/>
            /// </summary>
            [FieldOffset(6), MarshalAs(UnmanagedType.U2)] public ushort wVirtualKeyCode;

            /// <summary>
            ///  The virtual scan code of the given key that represents the device-dependent value generated by the keyboard hardware.
            /// </summary>
            [FieldOffset(8), MarshalAs(UnmanagedType.U2)] public ushort wVirtualScanCode;

            /// <summary>
            ///  Translated Unicode character.
            /// </summary>
            [FieldOffset(10)] public char UnicodeChar;

            /// <summary>
            ///  The state of the control keys. See <see cref="CONTROL_KEY_STATE"/>.
            /// </summary>
            [FieldOffset(12), MarshalAs(UnmanagedType.U4)] public uint dwControlKeyState;
        }
    }
}
